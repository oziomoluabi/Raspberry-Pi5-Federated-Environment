name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate-release:
    runs-on: ubuntu-latest
    name: Validate Release
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: v1.0.0"
          exit 1
        fi
    
    - name: Check if tag exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "Tag $VERSION already exists"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual release for existing tag"
          fi
        else
          echo "New tag: $VERSION"
        fi

  test-before-release:
    runs-on: ubuntu-latest
    name: Test Before Release
    needs: validate-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install numpy pandas matplotlib structlog pyyaml python-dotenv
        pip install pytest pytest-mock
    
    - name: Run tests
      run: |
        pytest tests/unit/test_sensor_manager.py -v
    
    - name: Run linting
      run: |
        pip install black flake8 isort
        black --check .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        isort --check-only .

  build-artifacts:
    runs-on: ubuntu-latest
    name: Build Release Artifacts
    needs: [validate-release, test-before-release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  build-docker-images:
    runs-on: ubuntu-latest
    name: Build Docker Images
    needs: [validate-release, test-before-release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push Dev Container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: .devcontainer/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    needs: [validate-release, test-before-release, build-artifacts, build-docker-images]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "## What's Changed" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [[ -n "$PREV_TAG" ]]; then
          echo "### Commits since $PREV_TAG:" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "### Initial Release" >> CHANGELOG.md
          echo "- First release of Raspberry Pi 5 Federated Environmental Monitoring Network" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## üöÄ Features" >> CHANGELOG.md
        echo "- Federated LSTM forecasting of environmental data" >> CHANGELOG.md
        echo "- TinyML autoencoder for vibration anomaly detection" >> CHANGELOG.md
        echo "- MATLAB/Simulink integration for advanced analytics" >> CHANGELOG.md
        echo "- Multi-root VS Code workspace with Dev Containers" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## üß∞ Hardware Support" >> CHANGELOG.md
        echo "- Raspberry Pi 5 (8 GB)" >> CHANGELOG.md
        echo "- Sense HAT (temperature, humidity, pressure, IMU)" >> CHANGELOG.md
        echo "- SparkFun ADXL345 3-axis accelerometer" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## üì¶ Installation" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "pip install raspberry-pi5-federated==$VERSION" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## üê≥ Docker" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "docker pull ghcr.io/${{ github.repository }}:$VERSION" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Release ${{ needs.validate-release.outputs.version }}
        body_path: CHANGELOG.md
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
        generate_release_notes: true

  publish-pypi:
    runs-on: ubuntu-latest
    name: Publish to PyPI
    needs: [validate-release, create-release]
    environment: release
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  notify-success:
    runs-on: ubuntu-latest
    name: Notify Release Success
    needs: [validate-release, create-release, publish-pypi]
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "üéâ Release ${{ needs.validate-release.outputs.version }} completed successfully!"
        echo "- GitHub Release: Created"
        echo "- PyPI Package: Published"
        echo "- Docker Images: Built and pushed"
        echo "- Artifacts: Available for download"

  notify-failure:
    runs-on: ubuntu-latest
    name: Notify Release Failure
    needs: [validate-release, test-before-release, build-artifacts, build-docker-images, create-release, publish-pypi]
    if: failure()
    
    steps:
    - name: Failure notification
      run: |
        echo "‚ùå Release ${{ needs.validate-release.outputs.version }} failed!"
        echo "Please check the workflow logs for details."
