[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "raspberry-pi5-federated"
version = "0.6.0"
description = "A comprehensive edge-AI platform combining federated learning, TinyML, and MATLAB/Simulink integration"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Raspberry Pi 5 Federated Team", email = "team@rpi5federated.org"}
]
maintainers = [
    {name = "Raspberry Pi 5 Federated Team", email = "team@rpi5federated.org"}
]
keywords = [
    "federated-learning",
    "tinyml",
    "raspberry-pi",
    "edge-ai",
    "iot",
    "environmental-monitoring",
    "machine-learning",
    "tensorflow",
    "matlab",
    "simulink"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Hardware",
    "Topic :: System :: Networking",
]
requires-python = ">=3.11"
dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "tensorflow>=2.12.0",
    "flwr>=1.4.0",
    "structlog>=23.0.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "cryptography>=41.0.0",
    "pyjwt>=2.8.0",
    "psutil>=5.9.0",
    "requests>=2.31.0",
    "matplotlib>=3.7.0",
    "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
    "pre-commit>=3.3.0",
    "coverage[toml]>=7.3.0",
    "docstr-coverage>=2.2.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocs-jupyter>=0.24.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
    "mkdocs-minify-plugin>=0.7.0",
]
matlab = [
    "matlabengine>=9.14.0",
    "oct2py>=5.6.0",
]
hardware = [
    "sense-hat>=2.6.0",
    "adafruit-circuitpython-adxl34x>=1.12.0",
    "RPi.GPIO>=0.7.1",
    "gpiozero>=1.6.2",
]
cloud = [
    "boto3>=1.28.0",
    "azure-storage-blob>=12.17.0",
    "google-cloud-storage>=2.10.0",
]
all = [
    "raspberry-pi5-federated[dev,docs,matlab,hardware,cloud]"
]

[project.urls]
Homepage = "https://github.com/YourOrg/Raspberry-Pi5-Federated"
Documentation = "https://your-organization.github.io/Raspberry-Pi5-Federated"
Repository = "https://github.com/YourOrg/Raspberry-Pi5-Federated"
Issues = "https://github.com/YourOrg/Raspberry-Pi5-Federated/issues"
Changelog = "https://github.com/YourOrg/Raspberry-Pi5-Federated/blob/main/CHANGELOG.md"

[project.scripts]
rpi5-federated-server = "server.main:main"
rpi5-federated-client = "client.main:main"
rpi5-security-audit = "scripts.security_audit:main"
rpi5-performance-benchmark = "scripts.performance_benchmark:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["server*", "client*", "scripts*"]
exclude = ["tests*", "docs*", ".github*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.toml", "*.cfg", "*.ini"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=server",
    "--cov=client",
    "--cov=scripts",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--durations=10",
    "--maxfail=5",
    "--timeout=300",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "hardware: Tests requiring hardware",
    "slow: Slow running tests",
    "security: Security-related tests",
    "performance: Performance benchmark tests",
    "matlab: Tests requiring MATLAB",
    "tinyml: TinyML-related tests",
    "federated: Federated learning tests",
    "network: Tests requiring network access",
    "gpu: Tests requiring GPU",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore:.*tensorflow.*:UserWarning",
    "ignore:.*numpy.*:UserWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests/logs/pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

# Coverage configuration
[tool.coverage.run]
source = ["server", "client", "scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "setup.py",
    "conftest.py",
]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2
skip_covered = false
skip_empty = false

[tool.coverage.html]
directory = "htmlcov"
title = "Raspberry Pi 5 Federated Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | env
  | \.venv
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["server", "client", "scripts"]
known_third_party = [
    "numpy",
    "pandas",
    "tensorflow",
    "flwr",
    "structlog",
    "pytest",
    "matplotlib",
    "sklearn",
    "cryptography",
    "jwt",
    "psutil",
    "requests",
    "yaml",
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["**/migrations/*", "**/venv/*", "**/env/*", "**/.venv/*"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "tensorflow.*",
    "flwr.*",
    "sense_hat.*",
    "adafruit_adxl34x.*",
    "RPi.GPIO.*",
    "gpiozero.*",
    "matlab.*",
    "oct2py.*",
    "psutil.*",
    "matplotlib.*",
    "sklearn.*",
]
ignore_missing_imports = true

# Pylint configuration
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement",
]

[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
    "W0622",  # redefined-builtin
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 6
max-branches = 15
max-statements = 50
max-parents = 7
max-attributes = 15
min-public-methods = 1
max-public-methods = 25
max-bool-expr = 5

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "env", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/*_test.py", "**/tests/**"]

# Pre-commit configuration would go in .pre-commit-config.yaml

# Documentation configuration
[tool.mkdocs]
config_file = "mkdocs.yml"

# Performance benchmarking configuration
[tool.pytest-benchmark]
min_rounds = 5
max_time = 2.0
min_time = 0.000005
timer = "time.perf_counter"
calibration_precision = 10
warmup = false
warmup_iterations = 100000
disable_gc = false
sort = "mean"
histogram = true
save = "benchmark_results.json"
save_data = true
autosave = true
compare = "benchmark_results.json"
compare_fail = ["min:10%", "mean:10%"]

# Timeout configuration
[tool.pytest-timeout]
timeout = 300
timeout_method = "thread"
func_only = true
