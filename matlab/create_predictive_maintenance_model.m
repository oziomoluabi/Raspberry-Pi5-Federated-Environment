function model_name = create_predictive_maintenance_model()
% CREATE_PREDICTIVE_MAINTENANCE_MODEL Create Simulink model for predictive maintenance
% Raspberry Pi 5 Federated Environmental Monitoring Network
%
% This function programmatically creates a Simulink model for predictive
% maintenance analysis combining vibration data, environmental conditions,
% and machine learning predictions.
%
% Output:
%   model_name - Name of the created Simulink model

fprintf('Creating Simulink Predictive Maintenance Model...\n');

% Model name
model_name = 'predictive_maintenance';

% Create new model
try
    close_system(model_name, 0);
catch
    % Model doesn't exist, continue
end

new_system(model_name);
open_system(model_name);

fprintf('Step 1: Adding input sources\n');

% Add vibration input
add_block('simulink/Sources/From Workspace', [model_name '/Vibration_Input'], ...
    'VariableName', 'vibration_data', ...
    'SampleTime', '0.01', ...
    'Position', [50, 50, 150, 80]);

% Add environmental input (temperature)
add_block('simulink/Sources/From Workspace', [model_name '/Temperature_Input'], ...
    'VariableName', 'temperature_data', ...
    'SampleTime', '1', ...
    'Position', [50, 120, 150, 150]);

% Add environmental input (humidity)
add_block('simulink/Sources/From Workspace', [model_name '/Humidity_Input'], ...
    'VariableName', 'humidity_data', ...
    'SampleTime', '1', ...
    'Position', [50, 190, 150, 220]);

fprintf('Step 2: Adding signal processing blocks\n');

% Vibration signal processing subsystem
add_block('simulink/Ports & Subsystems/Subsystem', [model_name '/Vibration_Processing'], ...
    'Position', [200, 30, 300, 100]);

% Configure vibration processing subsystem
vibration_subsystem = [model_name '/Vibration_Processing'];
open_system(vibration_subsystem);

% Add input port
add_block('simulink/Ports & Subsystems/In1', [vibration_subsystem '/Vibration_In'], ...
    'Position', [25, 50, 55, 65]);

% Add FFT analysis
add_block('dsp/Transforms/FFT', [vibration_subsystem '/FFT'], ...
    'Position', [100, 30, 150, 70]);

% Add RMS calculation
add_block('dsp/Statistics/RMS', [vibration_subsystem '/RMS'], ...
    'Position', [100, 90, 150, 130]);

% Add peak detection
add_block('simulink/Math Operations/MinMax', [vibration_subsystem '/Peak_Detector'], ...
    'Function', 'max', ...
    'Position', [100, 150, 150, 190]);

% Add feature extraction (combine RMS, peak, frequency content)
add_block('simulink/Math Operations/Math Function', [vibration_subsystem '/Feature_Combine'], ...
    'Operator', 'square', ...
    'Position', [200, 90, 230, 130]);

% Add output port
add_block('simulink/Ports & Subsystems/Out1', [vibration_subsystem '/Features_Out'], ...
    'Position', [280, 105, 310, 120]);

% Connect vibration processing blocks
add_line(vibration_subsystem, 'Vibration_In/1', 'FFT/1');
add_line(vibration_subsystem, 'Vibration_In/1', 'RMS/1');
add_line(vibration_subsystem, 'Vibration_In/1', 'Peak_Detector/1');
add_line(vibration_subsystem, 'RMS/1', 'Feature_Combine/1');
add_line(vibration_subsystem, 'Feature_Combine/1', 'Features_Out/1');

close_system(vibration_subsystem);

fprintf('Step 3: Adding environmental processing\n');

% Environmental data fusion
add_block('simulink/Math Operations/Add', [model_name '/Env_Fusion'], ...
    'Inputs', '++', ...
    'Position', [200, 140, 230, 170]);

% Add gain blocks for environmental weighting
add_block('simulink/Math Operations/Gain', [model_name '/Temp_Weight'], ...
    'Gain', '0.6', ...
    'Position', [170, 115, 190, 135]);

add_block('simulink/Math Operations/Gain', [model_name '/Humidity_Weight'], ...
    'Gain', '0.4', ...
    'Position', [170, 185, 190, 205]);

fprintf('Step 4: Adding machine learning prediction block\n');

% ML Prediction block (MATLAB Function)
add_block('simulink/User-Defined Functions/MATLAB Function', [model_name '/ML_Predictor'], ...
    'Position', [350, 80, 450, 140]);

% Configure MATLAB Function block
ml_block_handle = get_param([model_name '/ML_Predictor'], 'Handle');
Simulink.BlockDiagram.addParameter(ml_block_handle, 'Script', ...
    ['function [health_score, anomaly_flag, remaining_life] = fcn(vibration_features, env_conditions)' newline ...
     '% ML-based predictive maintenance algorithm' newline ...
     '% Inputs:' newline ...
     '%   vibration_features - Processed vibration features' newline ...
     '%   env_conditions - Environmental conditions (temp + humidity)' newline ...
     '% Outputs:' newline ...
     '%   health_score - Equipment health score (0-100)' newline ...
     '%   anomaly_flag - Binary anomaly detection flag' newline ...
     '%   remaining_life - Estimated remaining useful life (hours)' newline newline ...
     '% Simple rule-based model (placeholder for trained ML model)' newline ...
     'vibration_threshold = 2.0;' newline ...
     'env_stress_threshold = 50.0;' newline newline ...
     '% Calculate vibration stress factor' newline ...
     'vibration_stress = min(vibration_features / vibration_threshold, 3.0);' newline newline ...
     '% Calculate environmental stress factor' newline ...
     'env_stress = min(env_conditions / env_stress_threshold, 2.0);' newline newline ...
     '% Combined stress factor' newline ...
     'total_stress = 0.7 * vibration_stress + 0.3 * env_stress;' newline newline ...
     '% Health score calculation (inverse of stress)' newline ...
     'health_score = max(0, 100 - total_stress * 30);' newline newline ...
     '% Anomaly detection' newline ...
     'anomaly_flag = (vibration_stress > 2.0) || (env_stress > 1.5);' newline newline ...
     '% Remaining useful life estimation (simplified)' newline ...
     'degradation_rate = total_stress * 0.1; % hours per hour' newline ...
     'remaining_life = max(0, (health_score / 100) * 1000 / max(degradation_rate, 0.01));' newline ...
     'remaining_life = min(remaining_life, 10000); % Cap at 10000 hours' newline]);

fprintf('Step 5: Adding output processing and displays\n');

% Health score display
add_block('simulink/Sinks/Display', [model_name '/Health_Score_Display'], ...
    'Position', [500, 60, 580, 80]);

% Anomaly flag display
add_block('simulink/Sinks/Display', [model_name '/Anomaly_Display'], ...
    'Position', [500, 100, 580, 120]);

% Remaining life display
add_block('simulink/Sinks/Display', [model_name '/Remaining_Life_Display'], ...
    'Position', [500, 140, 580, 160]);

% Add data logging
add_block('simulink/Sinks/To Workspace', [model_name '/Health_Log'], ...
    'VariableName', 'health_score_log', ...
    'SaveFormat', 'Timeseries', ...
    'Position', [500, 180, 580, 200]);

add_block('simulink/Sinks/To Workspace', [model_name '/Anomaly_Log'], ...
    'VariableName', 'anomaly_log', ...
    'SaveFormat', 'Timeseries', ...
    'Position', [500, 220, 580, 240]);

fprintf('Step 6: Connecting all blocks\n');

% Connect input sources to processing
add_line(model_name, 'Vibration_Input/1', 'Vibration_Processing/1');
add_line(model_name, 'Temperature_Input/1', 'Temp_Weight/1');
add_line(model_name, 'Humidity_Input/1', 'Humidity_Weight/1');

% Connect environmental processing
add_line(model_name, 'Temp_Weight/1', 'Env_Fusion/1');
add_line(model_name, 'Humidity_Weight/1', 'Env_Fusion/2');

% Connect to ML predictor
add_line(model_name, 'Vibration_Processing/1', 'ML_Predictor/1');
add_line(model_name, 'Env_Fusion/1', 'ML_Predictor/2');

% Connect outputs
add_line(model_name, 'ML_Predictor/1', 'Health_Score_Display/1');
add_line(model_name, 'ML_Predictor/2', 'Anomaly_Display/1');
add_line(model_name, 'ML_Predictor/3', 'Remaining_Life_Display/1');

% Connect logging
add_line(model_name, 'ML_Predictor/1', 'Health_Log/1');
add_line(model_name, 'ML_Predictor/2', 'Anomaly_Log/1');

fprintf('Step 7: Configuring model parameters\n');

% Set model configuration parameters
set_param(model_name, 'SolverType', 'Fixed-step');
set_param(model_name, 'FixedStep', '0.01');
set_param(model_name, 'StopTime', '100');
set_param(model_name, 'SaveOutput', 'on');
set_param(model_name, 'OutputSaveName', 'yout');

% Add model description
set_param(model_name, 'Description', ...
    ['Predictive Maintenance Model for Raspberry Pi 5 Federated System' newline ...
     'Combines vibration analysis, environmental monitoring, and ML predictions' newline ...
     'Created automatically by create_predictive_maintenance_model.m']);

fprintf('Step 8: Adding annotations and documentation\n');

% Add title annotation
add_block('simulink/Ports & Subsystems/Note', [model_name '/Title'], ...
    'Position', [50, 10, 200, 25]);
set_param([model_name '/Title'], 'Text', 'Predictive Maintenance System');

% Add description annotation
add_block('simulink/Ports & Subsystems/Note', [model_name '/Description'], ...
    'Position', [350, 10, 580, 50]);
set_param([model_name '/Description'], 'Text', ...
    ['Real-time predictive maintenance combining:' newline ...
     '• Vibration analysis (100 Hz)' newline ...
     '• Environmental monitoring (1 Hz)' newline ...
     '• ML-based health prediction' newline ...
     '• Anomaly detection and RUL estimation']);

% Save the model
save_system(model_name);

fprintf('Step 9: Creating test data generation function\n');

% Create companion function for test data
test_data_function = [
'function [vibration_data, temperature_data, humidity_data] = generate_test_data()' newline ...
'% Generate synthetic test data for predictive maintenance model' newline ...
'% Outputs workspace variables for Simulink model' newline newline ...
'% Time vectors' newline ...
't_vib = (0:0.01:100)'';  % 100 Hz vibration data' newline ...
't_env = (0:1:100)'';     % 1 Hz environmental data' newline newline ...
'% Generate synthetic vibration data' newline ...
'base_freq = 50; % Base machine frequency' newline ...
'vibration_signal = 0.5 * sin(2*pi*base_freq*t_vib) + ...' newline ...
'                  0.2 * sin(2*pi*2*base_freq*t_vib) + ...' newline ...
'                  0.1 * randn(size(t_vib));' newline newline ...
'% Add degradation over time' newline ...
'degradation_factor = 1 + 0.5 * (t_vib / 100).^2;' newline ...
'vibration_signal = vibration_signal .* degradation_factor;' newline newline ...
'% Add anomalies at specific times' newline ...
'anomaly_times = [30, 60, 85];' newline ...
'for i = 1:length(anomaly_times)' newline ...
'    anomaly_idx = find(abs(t_vib - anomaly_times(i)) < 2);' newline ...
'    vibration_signal(anomaly_idx) = vibration_signal(anomaly_idx) + 2*randn(size(anomaly_idx));' newline ...
'end' newline newline ...
'% Generate environmental data' newline ...
'temp_base = 25; % Base temperature' newline ...
'humidity_base = 60; % Base humidity' newline newline ...
'temperature_signal = temp_base + 5*sin(2*pi*t_env/24) + 2*randn(size(t_env));' newline ...
'humidity_signal = humidity_base - 10*sin(2*pi*t_env/24) + 5*randn(size(t_env));' newline newline ...
'% Create timeseries objects for Simulink' newline ...
'vibration_data = timeseries(vibration_signal, t_vib);' newline ...
'temperature_data = timeseries(temperature_signal, t_env);' newline ...
'humidity_data = timeseries(humidity_signal, t_env);' newline newline ...
'fprintf(''Test data generated successfully!\\n'');' newline ...
'fprintf(''Vibration data: %d samples over %.1f seconds\\n'', length(t_vib), t_vib(end));' newline ...
'fprintf(''Environmental data: %d samples over %.1f seconds\\n'', length(t_env), t_env(end));' newline ...
'end'
];

% Write test data function to file
fid = fopen('generate_test_data.m', 'w');
fprintf(fid, '%s', test_data_function);
fclose(fid);

fprintf('Simulink model creation completed successfully!\n');
fprintf('Model name: %s\n', model_name);
fprintf('Model file: %s.slx\n', model_name);
fprintf('Test data function: generate_test_data.m\n');

% Display model
fprintf('\nTo run the model:\n');
fprintf('1. Run: generate_test_data()\n');
fprintf('2. Run: sim(''%s'')\n', model_name);
fprintf('3. Check workspace for results\n');

end
